<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | 闲散记事]]></title>
  <link href="http://lvzwq.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://lvzwq.github.io/"/>
  <updated>2018-11-02T16:57:00+08:00</updated>
  <id>http://lvzwq.github.io/</id>
  <author>
    <name><![CDATA[Lvzwq]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala基础语法]]></title>
    <link href="http://lvzwq.github.io/blog/2015/11/13/scalaji-chu-yu-fa/"/>
    <updated>2015-11-13T23:03:58+08:00</updated>
    <id>http://lvzwq.github.io/blog/2015/11/13/scalaji-chu-yu-fa</id>
    <content type="html"><![CDATA[<!--more-->


<h2>表达式和值</h2>

<h3>启动解释器</h3>

<pre><code class="scala">$ scala
Welcome to Scala version 2.11.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_25).
Type in expressions to have them evaluated.
Type :help for more information.

scala&gt;
</code></pre>

<h3>表达式</h3>

<pre><code>scala&gt; 1 + 1
res0: Int = 2
</code></pre>

<h3>值(常量)</h3>

<p>你可以给一个表达式的结果起个名字赋成一个不变量<code>（val）</code>
```
scala> val two = 1 + 1
two: Int = 2</p>

<p>scala> two = 2
<console>:8: error: reassignment to val
       two = 2
           ^
```</p>

<h3>变量</h3>

<p>如果你需要修改这个名称和结果的绑定，可以选择使用<code>var</code>。
```
scala> var name = &ldquo;steve&rdquo;
name: java.lang.String = steve</p>

<p>scala> name = &ldquo;marius&rdquo;
name: java.lang.String = marius
```</p>

<h3>函数(<code>function</code>)</h3>

<p>你可以使用def创建函数.
```
scala> def addOne(m: Int): Int = m + 1
addOne: (m: Int)Int</p>

<h1>其中m为参数,冒号后为参数类型，括号为Int为返回值类型。可以不写，编译器自动识别。</h1>

<pre><code>如果函数不带参数，你可以不写括号
</code></pre>

<p>scala> def three() = 1 + 2
three: ()Int</p>

<p>scala> three()
res2: Int = 3</p>

<p>scala> three
res3: Int = 3
```</p>

<h3>匿名函数</h3>

<pre><code>scala&gt; (x: Int) =&gt; x + 1
res2: (Int) =&gt; Int = &lt;function1&gt;
</code></pre>

<p>这个函数为参数为<code>x</code>的<code>Int</code>变量加1。
<code>
scala&gt; res2(1)
res3: Int = 2
</code>
你可以传递匿名函数，或将其保存成不变量。
```
scala> val addOne = (x: Int) => x + 1
addOne: (Int) => Int = <function1></p>

<p>scala> addOne(1)
res4: Int = 2
<code>
如果你的函数有很多表达式，可以使用`{}`来格式化代码，使之易读
</code>
def timesTwo(i: Int): Int = {
  println(&ldquo;hello world&rdquo;)
  i * 2   //返回值为Int
}
```</p>

<p>对匿名函数也是这样的。
```
scala> { i: Int =>
  println(&ldquo;hello world&rdquo;)
  i * 2
}
res0: (Int) => Int = <function1></p>

<p>等价于 (i: Int) =>{
    println(&ldquo;hello world&rdquo;)
    i * 2
}
```</p>

<h3>函数是一等公民</h3>

<pre><code>//函数值
val squareVal = (a: Int) =&gt; a * a
//函数作为参数传递
def addOne(f:Int =&gt; Int, arg:Int) = f(arg) + 1
println("addOne(squareVal,2):" + addOne(squareVal, 2)) // 结果为6
</code></pre>

<h3>按名称传递参数</h3>

<pre><code>val logEnable = false

val MSG = "programing is running"
def log(msg: String) =
    if (logEnable) println(msg)
    else println("programing is exit")
log(MSG + 1 / 0)
</code></pre>

<p>因为程序中出现了<code>1 / 0</code>，所以程序运行的话会出现异常, 但是修改为按名称传递后将不会产生异常。
<code>
def log(msg: =&gt; String) =
    if (logEnable) println(msg)
    else println("programing is exit")
</code>
因为log函数的参数是按名称传递，参数会等到实际使用的时候才会计算，所以被跳过。
按名称传递参数可以减少不必要的计算和异常。</p>

<h3>部分应用<code>(Partial application)</code></h3>

<p>你可以使用下划线<code>“_”</code>部分应用一个函数，结果将得到另一个函数。<code>Scala</code>使用下划线表示不同上下文中的不同事物，你通常可以把它看作是一个没有命名的神奇通配符。在<code>{ _ + 2 }</code>的上下文中，它代表一个匿名参数。你可以这样使用它：
```
scala> def adder(m: Int, n: Int, i: Int) = m + n + i
adder: (m: Int, n: Int, i: Int)Int</p>

<p>scala> val add2 = adder(5, _: Int, 10)
add2: Int => Int = <function1></p>

<p>scala> add2(7)
res25: Int = 22
```</p>

<h3>鸭子类型</h3>

<pre><code>{ def close(): Unit }
</code></pre>

<p>作为参数类型。因此任何含有<code>close()</code>的函数的类都可以作为参数。
不必使用继承这种不够灵活的特性。
```
def withClose(closeAble: { def close(): Unit },  op: { def close(): Unit } => Unit) {
    try {
        op(closeAble)
    } finally {
        closeAble.close()
    }
}</p>

<p>class Connection {
    def close() = println(&ldquo;close Connection&rdquo;)</p>

<p>val conn: Connection = new Connection()
withClose(conn, conn => println(&ldquo;do something with Connection&rdquo;))
```</p>

<h3>柯里化函数</h3>

<pre><code>def add(x:Int, y:Int) = x + y
</code></pre>

<p>是普通的函数
<code>
def add(x:Int) = (y:Int) =&gt; x + y
</code>
是柯里化后的函数，相当于返回一个匿名函数表达式。
<code>
def add(x:Int)(y:Int) = x + y
</code>
有时会有这样的需求：允许别人一会在你的函数上应用一些参数，然后又应用另外的一些参数。
```
scala> def multiply(m: Int)(n: Int): Int = m * n
multiply: (m: Int)(n: Int)Int</p>

<p>// 你可以直接传入两个参数。
scala> multiply(2)(3)
res0: Int = 6</p>

<p>// 你可以填上第一个参数并且部分应用第二个参数。加 _ 作为部分应用函数
scala> val timesTwo = multiply(2) _ <br/>
timesTwo: (Int) => Int = <function1></p>

<p>scala> timesTwo(3)
res1: Int = 6
<code>
也可以
</code>
scala> def multiply(m: Int) = (n: Int) => m * n
multiply: (m: Int)Int => Int</p>

<p>scala> val timesTwo = multiply(2)
timesTwo: Int => Int = <function1></p>

<p>scala> timesTwo(5)
res36: Int = 10
```</p>

<h3>可变长度参数</h3>

<p><code>Scala</code>在定义函数时允许指定最后一个参数可以重复（变长参数），从而允许函数调用者使用变长参数列表来调用该函数，<code>Scala</code>中使用<code>“*”</code>来指明该参数为重复参数
<code>Scala
def printf(text: String, xs: Any*) = Console.print(text.format(xs: _*))
</code>
例如要在多个字符串上执行String的capitalize函数，可以这样写：
```
def capitalizeAll(args: String*) = {
  args.map { arg =>
    arg.capitalize
  }
}</p>

<p>scala> capitalizeAll(&ldquo;rarity&rdquo;, &ldquo;applejack&rdquo;)
res2: Seq[String] = ArrayBuffer(Rarity, Applejack)
```</p>

<pre><code class="Scala">def printA (args: String *) = 
    for (arg &lt;- args) 
        println(arg)

scala&gt; printA ("1", "2", "3")
1
2
3
</code></pre>

<p>在函数内部，变长参数的类型，实际为一数组，比如上例的<code>String *</code> 类型实际为 <code>Array[String]</code>。 然而，如今你试图直接传入一个数组类型的参数给这个参数，编译器会报错：
```
scala> var arr = Array(&ldquo;hello&rdquo;, &ldquo;world&rdquo;, &ldquo;goodbye&rdquo;)
arr: Array[String] = Array(hello, world, goodbye)</p>

<p>scala> printA(arr)
<console>:10: error: type mismatch;
 found   : Array[String]
 required: String
              printA(arr)
                     ^
<code>
为了避免这种情况，你可以通过在变量后面添加 `_*`来解决，这个符号告诉`Scala`编译器在传递参数时逐个传入数组的每个元素，而不是数组整体。
</code>
scala> printA(arr: _*)
hello
world
goodbye
```</p>

<h3>类</h3>

<pre><code>class Person(val firstName: String, val lastName: String) {
  private var _age = 0

  def age = _age

  def age_=(newAge: Int) = _age = newAge

  def fullName() = firstName + " " + lastName

  override def toString() = fullName()
}
</code></pre>

<h4>构造函数</h4>

<p>构造函数不是特殊的方法，他们是除了类的方法定义之外的代码。让我们扩展计算器的例子，增加一个构造函数参数，并用它来初始化内部状态。
```
class Calculator(brand: String) {
  /<em>*
   * A constructor.
   </em>/
  val color: String = if (brand == &ldquo;TI&rdquo;) {
    &ldquo;blue&rdquo;
  } else if (brand == &ldquo;HP&rdquo;) {
    &ldquo;black&rdquo;
  } else {
    &ldquo;white&rdquo;
  }</p>

<p>  // An instance method.
  def add(m: Int, n: Int): Int = m + n
}
<code>
你可以使用构造函数来构造一个实例：
</code>
scala> val calc = new Calculator(&ldquo;HP&rdquo;)
calc: Calculator = Calculator@1e64cc4d</p>

<p>scala> calc.color
res0: String = black
```</p>

<h3>函数与方法</h3>

<p>函数和方法在很大程度上是可以互换的。由于函数和方法是如此的相似，你可能都不知道你调用的东西是一个函数还是一个方法。而当真正碰到的方法和函数之间的差异的时候，你可能会感到困惑。
```
scala> class C {
     |   var acc = 0
     |   def minc = { acc += 1 }  //定义方法
     |   val finc = { () => acc += 1 }    // 定义函数
     | }
defined class C</p>

<p>scala> val c = new C
c: C = C@1af1bd6</p>

<p>scala> c.minc // calls c.minc()</p>

<p>scala> c.finc // returns the function as a value:
res2: () => Unit = <function0>
```</p>

<h3>继承</h3>

<pre><code>class ScientificCalculator(brand: String) extends Calculator(brand) {
  def log(m: Double, base: Double) = math.log(m) / math.log(base)
}
</code></pre>

<h4>重载</h4>

<pre><code>class EvenMoreScientificCalculator(brand: String) extends ScientificCalculator(brand) {
  def log(m: Int): Double = log(m, math.exp(1))
}
</code></pre>

<h3>特质<code>(Trait)</code></h3>

<p>特质是一些字段和行为的集合，Traits就像是有函数体的Interface,可以扩展或混入（mixin）你的类中。
```
trait Car {
  val brand: String
}</p>

<p>trait Shiny {
  val shineRefraction: Int
}</p>

<p>class BMW extends Car {
  val brand = &ldquo;BMW&rdquo;
}
<code>
通过`with`关键字，一个类可以扩展多个特质
</code>
class BMW extends Car with Shiny {
  val brand = &ldquo;BMW&rdquo;
  val shineRefraction = 12
}
```</p>

<h3>泛型</h3>

<p>对函数参数是泛型的，来适用于所有类型。使用<code>[]</code>引入泛型，在使用确定泛型的参数类型。
<code>
trait Cache[K, V] {
  def get(key: K): V
  def put(key: K, value: V)
  def delete(key: K)
}
</code>
方法也可以引入类型参数。
<code>
def remove[K](key: K)
</code></p>

<h3>参考</h3>

<p><a href="http://twitter.github.io/scala_school/zh_cn/basics.html">Scala 课堂</a>
<a href="http://zh.scala-tour.com/#/hello-wolrd">Scala 指南</a></p>
]]></content>
  </entry>
  
</feed>
